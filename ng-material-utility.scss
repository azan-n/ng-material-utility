@use "sass:map";

$color-families: 'primary', 'accent', 'warn';
$color-shades: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900;


$alternate-families: 'background', 'foreground';

$color-map-names: 'primary', 'accent', 'warn', 'background', 'foreground';

@mixin all($theme) {
    @include background-color($theme);
    @include color($theme);
    @include text-decoration-color($theme);
    @include outline-color($theme);
    @include border-color($theme);

}

@mixin background-color($theme) {
    @include generate-classes('background-color', 'bg', $theme);
}

@mixin color($theme) {
    @include generate-classes('color', 'text', $theme);
}

@mixin text-decoration-color($theme) {
    @include generate-classes('text-decoration-color', 'decoration', $theme);
}

@mixin outline-color($theme) {
    @include generate-classes('outline-color', 'outline', $theme);
}

@mixin border-color($theme) {
    @include generate-classes('border-color', 'border', $theme);
}

@mixin generate-classes($property, $suffix, $theme) {
    @each $color-map-name in $color-map-names {

        @each $map-key,
        $map-value in map.get($theme, $color-map-name) {

            // Do nothing if the contrast map is found.
            // All color maps within themes have a corresponding '-contrast' value defined for them automatically.
            @if $map-key =='contrast' {}

            @else {
                .#{$suffix}-#{$color-map-name}-#{$map-key} {
                    #{$property}: $map-value;
                }
            }

        }
    }

}